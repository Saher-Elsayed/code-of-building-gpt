@echo off
REM -----------------------------------------
REM MCP Integration Setup Script
REM Building Code GPT + Revit Integration
REM -----------------------------------------

echo.
echo ========================================
echo  Building Code GPT - MCP Setup
echo ========================================
echo.

REM 1. Check if virtual environment exists
if not exist venv (
    echo Creating virtual environment...
    python -m venv venv
    if errorlevel 1 (
        echo ERROR: Failed to create virtual environment
        pause
        exit /b 1
    )
)

REM 2. Activate virtual environment
echo Activating virtual environment...
call venv\Scripts\activate
if errorlevel 1 (
    echo ERROR: Failed to activate virtual environment
    pause
    exit /b 1
)

REM 3. Upgrade pip
echo Upgrading pip...
python -m pip install --upgrade pip

REM 4. Install base requirements
echo Installing base requirements...
pip install -r requirements.txt
if errorlevel 1 (
    echo ERROR: Failed to install base requirements
    pause
    exit /b 1
)

REM 5. Install MCP dependencies
echo Installing MCP dependencies...
pip install mcp>=1.0.0
pip install asyncio-mqtt>=0.13.0
pip install jsonschema>=4.0.0
if errorlevel 1 (
    echo WARNING: Some MCP dependencies may not be available
    echo This is normal if MCP is not yet released
)

REM 6. Create necessary directories
echo Creating project directories...
if not exist mcp mkdir mcp
if not exist revit_scripts mkdir revit_scripts
if not exist generated_scripts mkdir generated_scripts
if not exist compliance_reports mkdir compliance_reports

REM 7. Copy MCP server file
echo Setting up MCP server...
if not exist mcp\__init__.py (
    echo. > mcp\__init__.py
)

REM 8. Create MCP configuration
echo Creating MCP configuration...
(
echo {
echo   "mcpServers": {
echo     "building-code-revit": {
echo       "command": "python",
echo       "args": [
echo         "mcp/mcp_server.py"
echo       ],
echo       "env": {
echo         "PYTHONPATH": ".",
echo         "OLLAMA_BASE_URL": "http://127.0.0.1:11434",
echo         "LLM_MODEL": "llama2:7b"
echo       }
echo     }
echo   }
echo }
) > mcp_config.json

REM 9. Create enhanced run script
echo Creating enhanced run script...
(
echo @echo off
echo REM Enhanced run script with MCP support
echo call venv\Scripts\activate
echo.
echo REM Load environment variables
echo for /f "usebackq tokens=1* delims==" %%%%A in ^(`findstr /r "^[^#].*=" .env`^) do ^(
echo     set %%%%A=%%%%B
echo ^)
echo.
echo echo Starting Building Code GPT with MCP integration...
echo streamlit run src\ui\enhanced_streamlit_app.py --server.address=127.0.0.1 --server.port=8501
echo pause
) > run_enhanced_app.bat

REM 10. Create MCP test script
echo Creating MCP test script...
(
echo @echo off
echo call venv\Scripts\activate
echo echo Testing MCP integration...
echo python -c "
echo try:
echo     import asyncio
echo     from mcp.mcp_integration import MCPRevitIntegration
echo     print('MCP integration modules imported successfully')
echo     mcp = MCPRevitIntegration()
echo     print('MCP integration initialized successfully')
echo except ImportError as e:
echo     print(f'ImportError: {e}')
echo     print('MCP dependencies may not be fully installed')
echo except Exception as e:
echo     print(f'Error: {e}')
echo "
echo pause
) > test_mcp.bat

REM 11. Create Revit script template
echo Creating Revit script template...
if not exist revit_scripts\template.py (
    (
    echo """
    echo Revit API Script Template
    echo Generated by Building Code GPT MCP Integration
    echo """
    echo.
    echo import clr
    echo clr.AddReference('RevitAPI'^)
    echo clr.AddReference('RevitAPIUI'^)
    echo from Autodesk.Revit.DB import *
    echo from Autodesk.Revit.UI import *
    echo.
    echo def main(^):
    echo     """Main script function"""
    echo     try:
    echo         # Get current document
    echo         doc = __revit__.ActiveUIDocument.Document
    echo         
    echo         # Your code here
    echo         TaskDialog.Show("Success", "Script executed successfully"^)
    echo         
    echo     except Exception as e:
    echo         TaskDialog.Show("Error", f"Script failed: {str(e^)}"^)
    echo.
    echo if __name__ == "__main__":
    echo     main(^)
    ) > revit_scripts\template.py
)

REM 12. Verify Ollama installation
echo.
echo Checking Ollama installation...
ollama --version >nul 2>&1
if errorlevel 1 (
    echo WARNING: Ollama not found in PATH
    echo Please install Ollama from https://ollama.ai/download
    echo Then run: ollama pull llama2:7b
) else (
    echo Ollama found! Checking for required model...
    ollama list | findstr "llama2:7b" >nul 2>&1
    if errorlevel 1 (
        echo Model llama2:7b not found. Pulling model...
        ollama pull llama2:7b
    ) else (
        echo Model llama2:7b is available
    )
)

REM 13. Final verification
echo.
echo ========================================
echo Setup Complete!
echo ========================================
echo.
echo Next steps:
echo 1. Ensure Ollama is running: ollama serve
echo 2. Run the enhanced app: run_enhanced_app.bat
echo 3. Test MCP integration: test_mcp.bat
echo.
echo Files created:
echo - mcp_config.json (MCP configuration)
echo - run_enhanced_app.bat (Enhanced startup script)
echo - test_mcp.bat (MCP test script)
echo - revit_scripts\template.py (Revit script template)
echo.
echo Directories created:
echo - mcp\ (MCP server files)
echo - revit_scripts\ (Generated Revit scripts)
echo - generated_scripts\ (Custom scripts)
echo - compliance_reports\ (Compliance reports)
echo.

pause