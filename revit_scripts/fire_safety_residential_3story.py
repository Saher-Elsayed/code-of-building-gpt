"""
Revit Fire Safety Compliance Script
Building Type: Residential, Stories: 3, Occupancy: 100
Generated by Building Code GPT
"""

import clr
clr.AddReference('RevitAPI')
clr.AddReference('RevitAPIUI')
from Autodesk.Revit.DB import *
from Autodesk.Revit.UI import *

def check_fire_safety_compliance(doc):
    """Check fire safety compliance for residential building"""
    
    building_type = "Residential"
    max_stories = 3
    occupancy_load = 100
    sprinkler_required = true
    
    compliance_issues = []
    
    # Check exit requirements
    collector = FilteredElementCollector(doc)
    doors = collector.OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().ToElements()
    
    exit_doors = []
    for door in doors:
        try:
            # Check if door is an exit door
            door_type = door.get_Parameter(BuiltInParameter.ALL_MODEL_TYPE_NAME)
            if door_type and "exit" in door_type.AsString().lower():
                exit_doors.append(door)
        except:
            continue
    
    # Calculate required exits based on occupancy load
    required_exits = max(2, (occupancy_load // 50))
    
    if len(exit_doors) < required_exits:
        compliance_issues.append(f"Insufficient exits: {len(exit_doors)} found, {required_exits} required")
    
    # Check corridor widths (simplified)
    # In real implementation, you would measure actual corridor widths
    
    # Check fire-rated assemblies
    walls = collector.OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().ToElements()
    fire_rated_walls = 0
    
    for wall in walls:
        try:
            fire_rating = wall.get_Parameter(BuiltInParameter.FIRE_RATING)
            if fire_rating and fire_rating.AsDouble() > 0:
                fire_rated_walls += 1
        except:
            continue
    
    # Report results
    message = f"Fire Safety Compliance Check\n"
    message += f"Building Type: {building_type}\n"
    message += f"Stories: {max_stories}\n"
    message += f"Occupancy Load: {occupancy_load}\n"
    message += f"Exit Doors Found: {len(exit_doors)} (Required: {required_exits})\n"
    message += f"Fire-Rated Walls: {fire_rated_walls}\n"
    message += f"Compliance Issues: {len(compliance_issues)}"
    
    if compliance_issues:
        message += "\n\nIssues:\n" + "\n".join(compliance_issues)
    
    TaskDialog.Show("Fire Safety Compliance", message)
    return compliance_issues

# Execute the function
if __name__ == "__main__":
    doc = __revit__.ActiveUIDocument.Document
    check_fire_safety_compliance(doc)
